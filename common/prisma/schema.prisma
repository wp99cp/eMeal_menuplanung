datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = env("PRISMA_OUTPUT")
  previewFeatures = ["fullTextIndex", "metrics", "tracing", "views"]
}

// ##############################
// ##############################
// ## Data model
// ##############################
// ##############################

//
// *Naming conventions*
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference
//
// Model:
//  - names must start with a letter and are typically spelled in PascalCase
//  - names should use the singular form (for example, User instead of user, users or Users)
//  - names should be singular and not plural (for example, User instead of Users)
//
// Field:
// - names must start with a letter and are typically spelled in camelCase
//

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  password          String?
  emailVerified     Boolean? @default(false)
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  created_at        Int?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Represents a user account
model User {
  id String @id @default(cuid())

  // base data of the user
  name     String?
  email    String? @unique
  username String? @unique @default(cuid())

  // if set to true, the email address will be publically visible
  shareEmail Boolean @default(false)

  // if the user is hidden, he will not be visible in the user list
  // you can only share a camp with that user by entering the email address
  isHiddenUser Boolean @default(false)

  emailVerified DateTime? /// date of the last email verification, null if not verified

  image    String?
  accounts Account[]
  sessions Session[]

  // registration meta data
  newUser      Boolean  @default(true) /// new users may have not finished the onboarding process
  registeredAt DateTime @default(now()) /// the date and time of account creation
  Camp         Camp[]
  Meal         Meal[]
}

model ParticipantCount {
  // could be a campId, mealId, dayId, ...
  id String @id @default(cuid())

  lastModification DateTime @updatedAt /// the date and time of the last modification

  // number of participants
  participantCount Int @default(0) /// the number of participants (including vegetarians and vegans)
  vegetarianCount  Int @default(0) /// the number of vegetarians
  veganCount       Int @default(0) /// the number of vegans

  /// if true, the count is relative to the total number of participants of the parent object
  isRelative Boolean @default(false)

  /// will not be updated if true
  isFixed Boolean @default(false)

  Camp      Camp?
  Day       Day?
  MealUsage MealUsage?
}

/// This is the main data model of the app.
model Camp {
  id String @id @default(cuid())

  name        String /// the name of the camp
  description String? /// the description of the camp
  year        Int /// the year of the camp

  creationDate     DateTime @default(now())
  lastModification DateTime @updatedAt

  // each camp has exactly one participant count
  participantCountId String           @unique /// the id of the participant count @unique
  participantCount   ParticipantCount @relation(fields: [participantCountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // each camp has maximum one owner
  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  days      Day[]
  mealUsage MealUsage[]
}

model Day {
  id String @id @default(cuid())

  date        DateTime @db.Date /// the date of the day
  description String? /// the description of the day

  creationDate     DateTime @default(now())
  lastModification DateTime @updatedAt

  // each day belongs to exactly one camp
  campId    String /// the id of the camp
  camp      Camp        @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealUsage MealUsage[]

  // each camp has exactly one participant count
  participantCountId String?           @unique /// the id of the participant count @unique
  participantCount   ParticipantCount? @relation(fields: [participantCountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // the tuple day and campId is unique
  @@unique([campId, date])
}

model MealUsage {
  id String @id @default(cuid())

  campId String /// the id of the camp
  date   DateTime @db.Date
  mealId String /// the id of the meal

  // each camp has exactly one participant count
  participantCountId String?           @unique /// the id of the participant count @unique
  participantCount   ParticipantCount? @relation(fields: [participantCountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  day  Day  @relation(fields: [campId, date], references: [campId, date], onDelete: Cascade, onUpdate: Cascade)
  camp Camp @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Meal {
  id String @id @default(cuid())

  name        String
  description String?
  keywords    String[]

  creationDate     DateTime @default(now())
  lastModification DateTime @updatedAt

  // each meal has max one owner
  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  recipes   Recipe[]
  mealUsage MealUsage[]
}

model Recipe {
  id String @id @default(cuid())

  creationDate     DateTime @default(now()) /// the date and time of the creation
  lastModification DateTime @updatedAt /// the date and time of the last modification

  order Int @default(autoincrement()) /// the order of the recipe in the meal

  name        String
  description String?
  keywords    String[]

  /// the ingredients of the recipe
  ingredients Ingredient[]

  // each recipe belongs to exactly one meal
  mealId String /// the id of the meal
  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // the tuple order mealId is unique
  @@unique([mealId, order])
}

model Ingredient {
  order Int @default(autoincrement()) /// the order of the ingredient in the recipe

  creationDate     DateTime @default(now()) /// the date and time of the creation
  lastModification DateTime @updatedAt /// the date and time of the last modification

  // defines the the ingredient
  amount  Float
  unit    String
  name    String
  isFresh Boolean @default(false)

  // each ingredient belongs to to exactly one recipe
  recipeId String /// the id of the recipe
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // the index is formed by the tuple of the recipeId and the order
  @@id([recipeId, order])
}
